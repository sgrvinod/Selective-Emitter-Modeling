#!/usr/bin/python
# -*- coding: latin-1 -*-
import numpy as np
import scipy as sci
import math as m
from scipy.optimize import curve_fit
from scipy.integrate import quad
import matplotlib.pyplot as plt
from scipy import interpolate

#Define constants
h=6.626e-34
c=3e8
kb=1.38e-23
tamb=290
ksb=5.67e-8
hconv=10

#Define a function that returns equilibrium temperatures when supplied humidity, material and thickness
def generate_eq_temp(filename1,filename2,thickness):
    
    #Store arguments for formatting text in graphs and output files
    if (filename1=="Selem_Hem_EmissivityforSiO2-Au.txt"):
        emitter="SiO2-Au"
    elif (filename1=="Selem_Hem_EmissivityforBN-Au.txt"):
        emitter="BN-Au"
    if (filename2=="Approx_Hem_Transfor2,3mm.txt"):
        humidity="2,33mm"
    elif (filename2=="Approx_Hem_Transfor10,00mm.txt"):
        humidity="10,00mm"
    if (thickness=="200nm"):
        t=0
    elif (thickness=="500nm"):
        t=1
    elif (thickness=="1000nm"):
        t=2
      
    #Read hemispherical emissivity values of emitter (generated by problem 2)
    eminem=np.genfromtxt(filename1,delimiter=' ',dtype=float)
    
    #Read hemispherical transmissivity values of atmosphere (generated by problem 1)    
    transatm=np.genfromtxt(filename2, delimiter=' ',dtype=float)
    
    #Calculate hemispherical emissivity values of atmosphere    
    ematm=np.zeros(shape=(len(transatm),2),dtype=float)
    for i in range(len(transatm)):
    	ematm[i,0]=transatm[i,0]
    	ematm[i,1]=1-transatm[i,1]
    
    #Calculate the value of the integrand for incoming radiation to emitter for each wavelength
    hat=np.zeros(shape=(len(transatm),2),dtype=float)
    for i in range(len(transatm)):
    	hat[i,0]=(h*c)/(kb*tamb*ematm[i,0]*(1e-6))
    	hat[i,1]=ematm[i,1]*eminem[i,t+1]*(hat[i,0]**3)/(np.exp(hat[i,0])-1)
    
    #Numerically integrate over all wavelengths to get incoming radiation at ambient temperature
    heatatm=np.trapz(hat[:,1],-1*hat[:,0])
    
    #Generate array and store range of temperature values
    temp=np.arange(190,291,1,dtype=float)
    
    #Create new array to store integrand values for outgoing radiation, for each wavelength and temperature
    hselemy=np.zeros(shape=(len(transatm),len(temp)),dtype=float)
    
    #Create new array to store values of independent variable in integration, x=hc/ktlambda    
    hselemx=np.zeros(shape=(len(transatm),len(temp)),dtype=float)        
    
    #Calculate the value of the integrand for outgoing radiation, for each wavelength and temperature
    for i in range(len(transatm)):
        for j in range(len(temp)):
    		hselemx[i,j]=(h*c)/(kb*temp[j]*ematm[i,0]*(1e-6))
    		hselemy[i,j]=((temp[j]/tamb)**4)*eminem[i,t+1]*((hselemx[i,j]**3)/(np.exp(hselemx[i,j])-1))
    
    #Create new array to store numerical integrations over all wavelengths, for each temperature    
    heatemtemp=np.zeros(shape=(len(temp),2),dtype=float)
    
    #Create new array to store net incoming radiation, for each temperature    
    heatdiff=np.zeros(shape=(len(temp),2),dtype=float)
    
    #Create new array to store net incoming radiation, for each temperature, with convection
    heatdiff_conv=np.zeros(shape=(len(temp),2),dtype=float)
    
    #Calculate net incoming radiation, for each temperature
    for j in range(len(temp)):
    	heatemtemp[j,0]=temp[j]
    	heatemtemp[j,1]=np.trapz(hselemy[:,j],-1*hselemx[:,j])
    	heatdiff[j,0]=temp[j]
  	heatdiff[j,1]=15*ksb*(1/m.pi**4)*(tamb**4)*(heatatm-heatemtemp[j,1])
  	heatdiff_conv[j,0]=temp[j]
  	heatdiff_conv[j,1]=15*ksb*(1/m.pi**4)*(tamb**4)*(heatatm-heatemtemp[j,1])+(10*(tamb-temp[j]))
 
    #Interpolate to get equilibrium temperatures, when net radiation is 0
    f=interpolate.interp1d(-1*heatdiff[:,1],heatdiff[:,0],kind='quadratic')
    f_conv=interpolate.interp1d(-1*heatdiff_conv[:,1],heatdiff_conv[:,0],kind='quadratic')
    eq_temp=f(0)
    eq_temp_conv=f_conv(0)
    
    #Plot net incoming radiation against temperature
    fig=plt.figure()
    fig.suptitle("%s Emitter (thickness %s) at %s" % (emitter,thickness,humidity))
    ax1=fig.add_subplot(211)    
    ax1.set_ylabel("Net Incoming Radiation")
    ax1.set_xlabel("Temperature (K)")
    ax1.set_xlim([90,450])
    ax1.set_title("Without Convection")
    ax1.plot(heatdiff[:,0],heatdiff[:,1],color='r',linewidth=2)
    ax1.text(eq_temp, 0, "Approximate Eq. Temp=%fK" % eq_temp)
    ax1.plot([50,450],[0,0],'k-')
    
    #Plot net incoming radiation against temperature, with convection
    ax2=fig.add_subplot(212)    
    ax2.set_ylabel("Net Incoming Radiation")
    ax2.set_xlabel("Temperature (K)")
    ax2.set_xlim([90,450])
    ax2.set_title("With Convection")
    ax2.plot(heatdiff[:,0],heatdiff[:,1],color='r',linewidth=2)
    ax2.text(eq_temp, 0, "Approximate Eq. Temp=%fK" % eq_temp_conv)
    ax2.plot([50,450],[0,0],'k-')
    
    #Optimize plot formatting and save to file
    fig.subplots_adjust(wspace=0.5, hspace=0.5)
    fig.savefig("%s_Emitter_(thickness_%s)_at_%s.png" % (emitter,thickness,humidity))
    
    #Return equilibrium temperatures, with and without convection    
    return eq_temp,eq_temp_conv
    
#Create lists to store equilibrium temperature tuples returned by the function
eqt1=[]
eqt2=[]
eqt3=[]
eqt4=[]

#Call function and acquire equilibrium temperatures 
eqt1.append(generate_eq_temp("Selem_Hem_EmissivityforSiO2-Au.txt","Approx_Hem_Transfor2,3mm.txt","200nm"))
eqt1.append(generate_eq_temp("Selem_Hem_EmissivityforSiO2-Au.txt","Approx_Hem_Transfor2,3mm.txt","500nm"))
eqt1.append(generate_eq_temp("Selem_Hem_EmissivityforSiO2-Au.txt","Approx_Hem_Transfor2,3mm.txt","1000nm"))

eqt2.append(generate_eq_temp("Selem_Hem_EmissivityforSiO2-Au.txt","Approx_Hem_Transfor10,00mm.txt","200nm"))
eqt2.append(generate_eq_temp("Selem_Hem_EmissivityforSiO2-Au.txt","Approx_Hem_Transfor10,00mm.txt","500nm"))
eqt2.append(generate_eq_temp("Selem_Hem_EmissivityforSiO2-Au.txt","Approx_Hem_Transfor10,00mm.txt","1000nm"))

eqt3.append(generate_eq_temp("Selem_Hem_EmissivityforBN-Au.txt","Approx_Hem_Transfor2,3mm.txt","200nm"))
eqt3.append(generate_eq_temp("Selem_Hem_EmissivityforBN-Au.txt","Approx_Hem_Transfor2,3mm.txt","500nm"))
eqt3.append(generate_eq_temp("Selem_Hem_EmissivityforBN-Au.txt","Approx_Hem_Transfor2,3mm.txt","1000nm"))

eqt4.append(generate_eq_temp("Selem_Hem_EmissivityforBN-Au.txt","Approx_Hem_Transfor10,00mm.txt","200nm"))
eqt4.append(generate_eq_temp("Selem_Hem_EmissivityforBN-Au.txt","Approx_Hem_Transfor10,00mm.txt","500nm"))
eqt4.append(generate_eq_temp("Selem_Hem_EmissivityforBN-Au.txt","Approx_Hem_Transfor10,00mm.txt","1000nm"))

#Plot equilibrium temperatures with and without convection against humidity, material and thickness
fig=plt.figure()
fig.suptitle("Equilibrium Temperatures")
ax1=fig.add_subplot(221)
ax1.set_ylabel("R=w/o conv,B=w/ conv")
ax1.set_xlabel("Thickness")
ax1.set_ylim([220,300])
ax1.set_title("Humidity 2,33mm for SiO2-Au")
x=[1,2,3]
my_xticks=["200nm","500nm","1000nm"]
ax1.set_xticks(x)
ax1.set_xticklabels(my_xticks)
ax1.plot(x,[eqt1[0][0],eqt1[1][0],eqt1[2][0]],color='r')
ax2=plt.twinx(ax1)
ax2.set_ylim([220,300])
ax2.plot(x,[eqt1[0][1],eqt1[1][1],eqt1[2][1]],color='b')

ax3=fig.add_subplot(222)
ax3.set_ylabel("R=w/o conv,B=w/ conv")
ax3.set_xlabel("Thickness")
ax3.set_ylim([220,300])
ax3.set_title("Humidity 10,00mm for SiO2-Au")
ax3.set_xticks(x)
ax3.set_xticklabels(my_xticks)
ax3.plot(x,[eqt2[0][0],eqt2[1][0],eqt2[2][0]],color='r')
ax4=plt.twinx(ax3)
ax4.set_ylim([220,300])
ax4.plot(x,[eqt2[0][1],eqt2[1][1],eqt2[2][1]],color='b')

ax5=fig.add_subplot(223)
ax5.set_ylabel("R=w/o conv,B=w/ conv")
ax5.set_xlabel("Thickness")
ax5.set_ylim([220,300])
ax5.set_title("Humidity 2,33mm for BN-Au")
ax5.set_xticks(x)
ax5.set_xticklabels(my_xticks)
ax5.plot(x,[eqt3[0][0],eqt3[1][0],eqt3[2][0]],color='r')
ax6=plt.twinx(ax5)
ax6.set_ylim([220,300])
ax6.plot(x,[eqt3[0][1],eqt3[1][1],eqt3[2][1]],color='b')

ax7=fig.add_subplot(224)
ax7.set_ylabel("R=w/o conv,B=w/ conv")
ax7.set_xlabel("Thickness")
ax7.set_ylim([220,300])
ax7.set_title("Humidity 10,00mm for BN-Au")
ax7.set_xticks(x)
ax7.set_xticklabels(my_xticks)
ax7.plot(x,[eqt4[0][0],eqt4[1][0],eqt4[2][0]],color='r')
ax7=plt.twinx(ax7)
ax7.set_ylim([220,300])
ax7.plot(x,[eqt4[0][1],eqt4[1][1],eqt4[2][1]],color='b')

#Optimize plot formatting and save to file
fig.subplots_adjust(wspace=0.5, hspace=0.5)
fig.savefig("Equilibrium Temperatures.png")

